#!/bin/bash
# version: 1.2
#
# ax25-upd for use with systemd & direwolf
# Ax25, rose, & mkiss - are pre-loaded via /etc/modules or built into kernel
#
# Uncomment this statement for debug echos
#DEBUG=1

SBINDIR=/usr/local/sbin
BINDIR=/usr/local/bin
KISSPARMS="$SBINDIR/kissparms"

PORT_CFG_FILE="/etc/ax25/port.conf"

# portname set in /etc/ax25/axports
DEVICE="udr"
SERIALPORT_DIREWOLF="/tmp/kisstnc"
declare -A ax25_ipaddr
ax25_ipaddr[0]="192.168.255.2"
ax25_ipaddr[1]="192.168.255.3"

firmware_prodfile="/sys/firmware/devicetree/base/hat/product"
firmware_prod_idfile="/sys/firmware/devicetree/base/hat/product_id"
firmware_vendorfile="/sys/firmware/devicetree/base/hat/vendor"

PROD_ID_NAMES=("INVALID" "INVALID" "UDRC" "UDRC II" "DRAWS" "1WSpot")
NWDIG_VENDOR_NAME="NW Digital Radio"

function dbgecho { if [ ! -z "$DEBUG" ] ; then echo "$*"; fi }

# ===== function EEPROM id_check

# Return code:
# 0 = no EEPROM or no device tree found
# 1 = HAT found but not a UDRC
# 2 = UDRC
# 3 = UDRC II
# 4 = DRAWS
# 5 = 1WSpot

function id_check() {
# Initialize to EEPROM not found
udrc_prod_id=0

# Does firmware file exist
if [ -f $firmware_prodfile ] ; then
   # Read product file
   UDRC_PROD="$(tr -d '\0' < $firmware_prodfile)"
   # Read vendor file
   FIRM_VENDOR="$(tr -d '\0' < $firmware_vendorfile)"
   # Read product id file
   UDRC_ID="$(tr -d '\0' < $firmware_prod_idfile)"
   #get last character in product id file
   UDRC_ID=${UDRC_ID: -1}

   dbgecho "UDRC_PROD: $UDRC_PROD, ID: $UDRC_ID"

   if [[ "$FIRM_VENDOR" == "$NWDIG_VENDOR_NAME" ]] ; then
      case $UDRC_PROD in
         "Universal Digital Radio Controller")
            udrc_prod_id=2
         ;;
         "Universal Digital Radio Controller II")
            udrc_prod_id=3
         ;;
         "Digital Radio Amateur Work Station")
            udrc_prod_id=4
         ;;
         "1WSpot")
            udrc_prod_id=5
         ;;
         *)
            echo "Found something but not a UDRC: $UDRC_PROD"
            udrc_prod_id=1
         ;;
      esac
   else

      dbgecho "Probably not a NW Digital Radio product: $FIRM_VENDOR"
      udrc_prod_id=1
   fi

   if [ udrc_prod_id != 0 ] && [ udrc_prod_id != 1 ] ; then
      if (( UDRC_ID == udrc_prod_id )) ; then
         dbgecho "Product ID match: $udrc_prod_id"
      else
         echo "Product ID MISMATCH $UDRC_ID : $udrc_prod_id"
         udrc_prod_id=1
      fi
   fi
   dbgecho "Found HAT for ${PROD_ID_NAMES[$UDRC_ID]} with product ID: $UDRC_ID"
else
   # Get here if no UDRC or DRAWS firmware detected
   # RPi HAT ID EEPROM may not have been programmed in engineering samples
   # or there is no RPi HAT installed.
   udrc_prod_id=0
   # Detect a DINAH USB sound device
   DEVICE=
   aplay -l | grep -q -i "USB Audio Device"
   if [ "$?" -eq 0 ] ; then
       DEVICE="dinah"
   fi
fi

PORTNAME_1="${DEVICE}0"
PORTNAME_2="${DEVICE}1"

return $udrc_prod_id
}

# ===== function get_port_speed

# Needs arg of device number, either 0 or 1
# Uses port.conf file for port speed, kissattach parms & ax.25 parms

function get_port_speed() {
    retcode=0

    portnumber=$1
    if [ -z $portnumber ] ; then
        echo "Need to supply a port number in get_port_cfg"
        return 1
    fi

    portname="$DEVICE$portnumber"
    portcfg="port$portnumber"
    dbgecho "Debug: portname=$portname, portcfg=$portcfg"

    PORTSPEED=$(sed -n "/\[$portcfg\]/,/\[/p" $PORT_CFG_FILE | grep -i "^speed" | cut -f2 -d'=')
    dbgecho "AX.25: $portname speed: $PORTSPEED"

    case $PORTSPEED in
        1200 | 9600)
            dbgecho "parse baud_$PORTSPEED section for $portname"
        ;;
        off)
            echo "Using split channel, port: $portname is off"
            bsplitchannel=true
        ;;
        *)
            echo "Invalid speed parameter: $PORTSPEED, found in $PORT_CFG_FILE"
            retcode=1
        ;;
    esac

    return $retcode
}

# ==== function default_kissparms
# set defaults for 1200 baud packet

function default_kissparms() {

    PORTSPEED="1200"
    SLOTTIME="200"
    TXDELAY="500"
    TXTAIL="100"
    PERSIST="32"
}

# ===== function get_kissparms
# arg1 = device number 0 or 1
# Sets varibles:
#  PORTSPEED, SLOTTIME, TXDELAY, T1_TIMEOUT, T2_TIMEOUT

function get_kissparms() {

    devnum=$1
    if [ -z $devnum ] ; then
        echo "Need to supply a device number in get_kissparms"
        return 1
    fi

    # Check for no port config file found
    if [ ! -f $PORT_CFG_FILE ] ; then
        echo "Port config file: $PORT_CFG_FILE NOT found, using 1200 baud default config"
        default_kissparms
    else
        # Set variables: portname, portcfg, PORTSPEED
        get_port_speed $devnum

        baudrate_parm="baud_$PORTSPEED"
        if [ "$PORTSPEED" != "off" ] && [ ! -z "$PORTSPEED" ] ; then
            SLOTTIME=$(sed -n "/\[$baudrate_parm\]/,/\[/p" $PORT_CFG_FILE | grep -i "^slottime" | cut -f2 -d'=')
            TXDELAY=$(sed -n "/\[$baudrate_parm\]/,/\[/p" $PORT_CFG_FILE | grep -i "^txdelay" | cut -f2 -d'=')
            TXTAIL=$(sed -n "/\[$baudrate_parm\]/,/\[/p" $PORT_CFG_FILE | grep -i "^txtail" | cut -f2 -d'=')
            PERSIST=$(sed -n "/\[$baudrate_parm\]/,/\[/p" $PORT_CFG_FILE | grep -i "^persist" | cut -f2 -d'=')
            T1_TIMEOUT=$(sed -n "/\[$baudrate_parm\]/,/\[/p" $PORT_CFG_FILE | grep -i "^t1_timeout" | cut -f2 -d'=')
            T2_TIMEOUT=$(sed -n "/\[$baudrate_parm\]/,/\[/p" $PORT_CFG_FILE | grep -i "^t2_timeout" | cut -f2 -d'=')
        else
            echo "Use split channel config, HF on channel $DEVICE$devnum"
        fi
    fi
    dbgecho "port: $devnum, speed: $PORTSPEED, slottime: $SLOTTIME, txdelay: $TXDELAY, t1 timeout: $T1_TIMEOUT, t2 timeout: $T2_TIMEOUT"
}

# ===== function get_ipaddr
# arg1 = device number 0 or 1
# Sets varible: IPADDR

function get_ipaddr() {

    portnumber=$1
    if [ -z $portnumber ] ; then
        echo "Need to supply a device number in ${FUNCNAME[0]}"
        return 1
    fi

    # Check for no port config file found
    if [ ! -f $PORT_CFG_FILE ] ; then
        echo "Port config file: $PORT_CFG_FILE NOT found, using default ip address"
        IPADDR=${ax25_ipaddr[$portnumber]}
    else
        portcfg="port$portnumber"
        IPADDR=$(sed -n "/\[$portcfg\]/,/\[/p" $PORT_CFG_FILE | grep -i "^ip_address" | cut -f2 -d'=')
        # Remove surrounding quotes
        IPADDR=${IPADDR%\"}
        IPADDR=${IPADDR#\"}
    fi
    dbgecho "port: $portnumber, ip address: $IPADDR"
}

# ===== function packet_1port
# arg1 is port number, either 0 or 1

function packet_1port() {
   portnum=$1
   pseudoterm=$($SBINDIR/mkiss $SERIALPORT_DIREWOLF /dev/ptmx none | tail -1)

   echo "using mkiss with Device $DEVICE and pseudo term=$pseudoterm on port $portnum"
   get_ipaddr $portnum
   PORTNAME="$DEVICE${portnum}"
   $SBINDIR/kissattach  ${pseudoterm} $PORTNAME ${IPADDR} >/tmp/ax25-config.tmp
   kissattach_ret=$?
   dbgecho "kissattach return: $?"
   get_port_speed $portnum
   /etc/ax25/ax25dev-parms ax0 $PORTSPEED
   echo " Port $PORTNAME attached to ax0"
}

# ===== function packet_2port
function packet_2port() {
   pseudoterm=$($SBINDIR/mkiss $SERIALPORT_DIREWOLF /dev/ptmx /dev/ptmx | tail -1)
   echo "$pseudoterm" > /tmp/ax25-config.tmp
   pseudoterm_1=$(echo $pseudoterm | cut -d ' ' -f1)
   pseudoterm_2=$(echo $pseudoterm | cut -d ' ' -f2)
   echo "using mkiss with UDRC II and pseudo term_1: $pseudoterm_1 pseudo term_2: $pseudoterm_2"

   get_ipaddr 0
   $SBINDIR/kissattach  ${pseudoterm_1} ${PORTNAME_1} ${IPADDR} >/tmp/ax25-config_1.tmp
   get_ipaddr 1
   $SBINDIR/kissattach  ${pseudoterm_2} ${PORTNAME_2} ${IPADDR} >/tmp/ax25-config_2.tmp
   kissattach_ret=$?
   dbgecho "kissattach return: $?"
   get_port_speed 0
   /etc/ax25/ax25dev-parms ax0 $PORTSPEED
   echo " Port ${PORTNAME_1} attached to ax0"
   get_port_speed 1
   /etc/ax25/ax25dev-parms ax1 $PORTSPEED
   echo " Port ${PORTNAME_2} attached to ax1"
}

# ===== main =====

# Check which UDRC or USB sound card is found
id_check
id_check_ret="$?"

echo "ax25-upd: Start Port ${PORTNAME_1} with device ${SERIALPORT_DIREWOLF}"

# Determine if running split channel
#  direwolf on one channel & HF on the other

bsplitchannel=false
for devnum in 0 1 ; do
    # Set variables: portname, portcfg, PORTSPEED
    get_port_speed $devnum
    if [ "$PORTSPEED" == "off" ] ; then
        bsplitchannel=true
    fi
done

if [ -L $SERIALPORT_DIREWOLF ] ; then
    echo "Direwolf serial port ready"
else
    echo "Direwolf serial port NOT FOUND"
    exit 1
fi

# Install KISS Parameter: P=32, W=$SLOTTIME, TXDelay=$TXDELAY
#  -l txtail   Sets the TX Tail time in milliseconds, in steps of ten milliseconds only
#  -r persist  Sets the persist value. range 0 to 255.
#  -s slottime Sets  the slottime in milliseconds, in steps of ten milliseconds only
#  -t txdelay  Sets the TX Delay in milliseconds, in steps of ten milliseconds only

# Initialize kissattach return code
kissattach_ret=-1

case $id_check_ret in
    0|1)
        packet_1port 0
        PORTNAME_1="$PORTNAME"
        echo "No UDRC found, using USB device, $PORTNAME_1"
        get_kissparms 0
        $KISSPARMS -p ${PORTNAME_1} -f no -l $TXTAIL -r $PERSIST -s $SLOTTIME -t $TXDELAY
    ;;
    2)
        echo "Original UDRC is installed."
        # use port 1 with mkiss
        packet_1port 1
        get_kissparms 1
        $KISSPARMS -p ${PORTNAME_1} -f no -l $TXTAIL -r $PERSIST -s $SLOTTIME -t $TXDELAY
    ;;
    3|4)
        echo "UDRC II or DRAWS installed"
        if $bsplitchannel ; then
            # use port 0 only with mkiss
            packet_1port 0
            get_kissparms 0
            $KISSPARMS -p ${PORTNAME_1} -f no -l $TXTAIL -r $PERSIST -s $SLOTTIME -t $TXDELAY

        else
            # use both ports with mkiss
            packet_2port
            get_kissparms 0
            $KISSPARMS -p ${PORTNAME_1} -f no -l $TXTAIL -r $PERSIST -s $SLOTTIME -t $TXDELAY
            get_kissparms 1
            $KISSPARMS -p ${PORTNAME_2} -f no -l $TXTAIL -r $PERSIST -s $SLOTTIME -t $TXDELAY
        fi
    ;;
    5)
        echo "One Watt Spot installed"
        # use port 0 with mkiss
        pseudoterm=$($SBINDIR/mkiss $SERIALPORT_DIREWOLF /dev/ptmx none | tail -1)
        echo "using mkiss with OWS and pseudo term=$pseudoterm on port 0"

        get_ipaddr 0
        $SBINDIR/kissattach  ${pseudoterm} ${PORTNAME_1} ${IPADDR} >/tmp/ax25-config.tmp
        kissattach_ret=$?
        dbgecho "kissattach return: $?"
        get_port_speed 0
        /etc/ax25/ax25dev-parms ax0 $PORTSPEED
        get_kissparms 0
        $KISSPARMS -p ${PORTNAME_1} -f no -l $TXTAIL -r $PERSIST -s $SLOTTIME -t $TXDELAY
    ;;
    *)
        echo "Invalid udrc id ... exiting"
        exit 1
    ;;
esac

# configure netrom
# Needs a callsign
# source /home/pi/n7nix/systemd/ax25/nr-up.sh

# AX25-upd (End)
echo
echo "ax25-upd script finished"
exit 0
