#!/bin/bash
#
PORT_CFG_FILE="/etc/ax25/port.conf"
scriptname="`basename $0`"


# ===== function dbgecho

function dbgecho { if [ ! -z "$DEBUG" ] ; then echo "$*"; fi }

# ===== function audio_device_check

function audio_device_check() {

    audio_device=$1
    if [ -z $audio_device ] ; then
        echo "Need to pass audio device name to audio_device_check()"
        return
    fi

    echo -n "== audio device $audio_device check: "
    device_status_file="/proc/asound/$audio_device/pcm0c/sub0/status"
    if [ -e "$device_status_file" ] ; then
        grep -i "state:\|closed" "$device_status_file"
    else
        echo "device status file: $device_status_file, does NOT exist"
    fi
}

# ===== function status_service

function status_service() {
    service="$1"
    IS_ENABLED="ENABLED"
    IS_RUNNING="RUNNING"
    # echo "Checking service: $service"
    systemctl is-enabled "$service" > /dev/null 2>&1
    if [ $? -ne 0 ] ; then
        IS_ENABLED="NOT ENABLED"
    fi
    systemctl is-active "$service" > /dev/null 2>&1
    if [ $? -ne 0 ] ; then
        IS_RUNNING="NOT RUNNING"
    fi
}

# ===== function ax25_status

function ax25_status() {

AX25_SERVICE_LIST="direwolf.service ax25dev.service ax25dev.path ax25-mheardd.service ax25d.service"

for service in `echo ${AX25_SERVICE_LIST}` ; do
    status_service $service
    echo "Status for $service: $IS_RUNNING and $IS_ENABLED"
done

device="ax0"
ip addr show dev $device > /dev/null 2>&1
if [ "$?" -ne 0 ] ; then
    echo "AX.25 device: $device not configured"
else
    ipaddr=$(ip addr show dev $device | grep "inet " | grep -Po '(\d+\.){3}\d+' | head -1)
    echo "AX.25 device: $device successfully configured with ip: $ipaddr"
fi

device="ax1"
ip addr show dev $device > /dev/null 2>&1
if [ "$?" -ne 0 ] ; then
    echo "AX.25 device: $device not configured"
else
    ipaddr=$(ip addr show dev $device | grep "inet " | grep -Po '(\d+\.){3}\d+' | head -1)
    echo "AX.25 device: $device successfully configured with ip: $ipaddr"
fi
}

# ===== function usage
# Display program help info

function usage () {
	(
	echo "Usage: $scriptname [-d][-h]"
        echo "    -d switch to turn on verbose debug display"
        echo "    -h display this message."
	echo " exiting ..."
	) 1>&2
	exit 1
}

# ===== function ax25_debugstatus

function ax25_debugstatus() {

    echo "== failed & loaded but inactive units=="
    systemctl --no-pager --failed --all
    echo
    echo "== direwolf =="
    echo "  pid: $(pidof direwolf)"
    verstr="$(direwolf -v 2>/dev/null | grep -m 1 -i version)"
    # Get rid of escape characters
    echo "  ver: D${verstr#*D}"
    echo "== /proc/sys =="
    ls /proc/sys/net/
    ls /proc/sys/net/ax25
    echo
    echo "== Network Interface ax0 & ax1 =="
    ip addr show dev ax0
    echo
    ip addr show dev ax1
    echo
    echo "== status networkd services =="
    systemctl is-enabled systemd-networkd-wait-online.service
    systemctl --no-pager status systemd-networkd-wait-online.service
    systemctl is-enabled systemd-networkd.service
    systemctl --no-pager status systemd-networkd.service
    echo
    echo "== status direwolf service =="
    systemctl is-enabled direwolf.service
    systemctl --no-pager status direwolf.service
    echo
    echo "== status ax25 service =="
    systemctl is-enabled ax25dev.service
    systemctl --no-pager status ax25dev.service
    echo
    journalctl --no-pager -u ax25dev.service
    echo
    echo "== status ax25 path =="
    systemctl is-enabled ax25dev.path
    systemctl --no-pager status ax25dev.path
    echo
    echo "== status ax25-mheardd =="
    systemctl is-enabled ax25-mheardd.service
    systemctl --no-pager status ax25-mheardd.service
    echo
    echo "== status ax25d =="
    systemctl is-enabled ax25d.service
    systemctl --no-pager status ax25d.service
    echo
    echo "== netstat ax25 =="
    netstat --ax25
}

# ===== function get_port_speed

# Needs arg of port number, either 0 or 1
# Uses port.conf file for:
#  - port speed, kissattach parms & ax.25 parms
#  - enabling split channel

function get_port_speed() {
    retcode=0
    if [ -e $PORT_CFG_FILE ] ; then
        dbgecho " ax25 port file exists"
        portnumber=$1
        if [ -z $portnumber ] ; then
            echo "Need to supply a port number in get_port_speed"
            return 1
        fi

        portname="udr$portnumber"
        portcfg="port$portnumber"

#        echo "Debug: portname=$portname, portcfg=$portcfg"

        PORTSPEED=$(sed -n "/\[$portcfg\]/,/\[/p" $PORT_CFG_FILE | grep -i "^speed" | cut -f2 -d'=')
        dbgecho "AX.25: $portname speed: $PORTSPEED"

        case $PORTSPEED in
            1200)
                dbgecho "parse baud_1200 section for $portname"
            ;;
            9600)
                dbgecho "parse baud_9600 section for $portname"
            ;;
            off)
                echo "Using split channel, port: $portname is off"
            ;;
            *)
                echo "Invalid speed parameter: $PORTSPEED, found in $PORT_CFG_FILE"
                retcode=1
            ;;
        esac
    else
        echo "ax25 port file: $PORT_CFG_FILE does not exist"
        retcode=1
    fi
    return $retcode
}

# ===== function speed_status

# Display parameters used for kissattach & AX.25 device

function speed_status() {

    SLOTTIME=
    TXDELAY=
    T1_TIMEOUT=
    T2_TIMEOUT=
    declare -A devicestat=([ax0]="exists" [ax1]="exists")

    # Check if direwolf is already running.
    pid=$(pidof direwolf)
    if [ $? -eq 0 ] ; then
        echo "Direwolf is running with pid of $pid"
    else
        echo "Direwolf is NOT running"
    fi

    for devnum in 0 1 ; do
        # Set variables: portname, portcfg, PORTSPEED
        get_port_speed $devnum
        baudrate_parm="baud_$PORTSPEED"
        if [ "$PORTSPEED" != "off" ] && [ ! -z "$PORTSPEED" ] ; then
            SLOTTIME=$(sed -n "/\[$baudrate_parm\]/,/\[/p" $PORT_CFG_FILE | grep -i "^slottime" | cut -f2 -d'=')
            TXDELAY=$(sed -n "/\[$baudrate_parm\]/,/\[/p" $PORT_CFG_FILE | grep -i "^txdelay" | cut -f2 -d'=')
        fi

        devname="ax$devnum"
        PARMDIR="/proc/sys/net/ax25/$devname"
        if [ -d "$PARMDIR" ] ; then
            dbgecho "Parameters for device $devname"

            T1_TIMEOUT=$(cat $PARMDIR/t1_timeout)
            T2_TIMEOUT=$(cat $PARMDIR/t2_timeout)
        else
            devicestat[$devname]="does NOT exist"
        fi
        echo "port: $devnum, speed: $PORTSPEED, slottime: $SLOTTIME, txdelay: $TXDELAY, t1 timeout: $T1_TIMEOUT, t2 timeout: $T2_TIMEOUT"
    done
    # Use a single line for device status
    echo "Device: ax0 ${devicestat[ax0]}, Device: ax1 ${devicestat[ax1]}"
}

# ===== main

# Be sure we're running as root
#if [[ $EUID != 0 ]] ; then
#   echo "Must be root"
#   exit 1
#fi

while [[ $# -gt 0 ]] ; do

    key="$1"
    case $key in
        -d)
            echo "AX25 Debug Status"
            ax25_debugstatus
            speed_status
            exit 0
        ;;
        *)
            echo "Undefined argument: $key"
            usage
            exit 1
        ;;
    esac
    shift # past argument or value
done


auddev="udrc"
audio_device_check $auddev
ax25_status
speed_status
exit 0
